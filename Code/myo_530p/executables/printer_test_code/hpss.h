#ifndef _ALTERA_HPSS_H_
#define _ALTERA_HPSS_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'soc_system' in
 * file '/cygdrive/d/Stericlinic/HWD/DE0_NANO_SOC_GHRD_last/soc_system.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following masters:
 *   h2f_axi_master
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'fifo_tx_uart_in', class 'altera_avalon_fifo'
 * The macros are prefixed with 'FIFO_TX_UART_IN_'.
 * The prefix is the slave descriptor.
 */
#define FIFO_TX_UART_IN_COMPONENT_TYPE altera_avalon_fifo
#define FIFO_TX_UART_IN_COMPONENT_NAME fifo_tx_uart
#define FIFO_TX_UART_IN_BASE 0x0
#define FIFO_TX_UART_IN_SPAN 4
#define FIFO_TX_UART_IN_END 0x3
#define FIFO_TX_UART_IN_AVALONMM_AVALONMM_DATA_WIDTH 32
#define FIFO_TX_UART_IN_AVALONMM_AVALONST_DATA_WIDTH 32
#define FIFO_TX_UART_IN_BITS_PER_SYMBOL 16
#define FIFO_TX_UART_IN_CHANNEL_WIDTH 8
#define FIFO_TX_UART_IN_ERROR_WIDTH 8
#define FIFO_TX_UART_IN_FIFO_DEPTH 256
#define FIFO_TX_UART_IN_SINGLE_CLOCK_MODE 0
#define FIFO_TX_UART_IN_SYMBOLS_PER_BEAT 2
#define FIFO_TX_UART_IN_USE_AVALONMM_READ_SLAVE 1
#define FIFO_TX_UART_IN_USE_AVALONMM_WRITE_SLAVE 1
#define FIFO_TX_UART_IN_USE_AVALONST_SINK 0
#define FIFO_TX_UART_IN_USE_AVALONST_SOURCE 0
#define FIFO_TX_UART_IN_USE_BACKPRESSURE 1
#define FIFO_TX_UART_IN_USE_IRQ 0
#define FIFO_TX_UART_IN_USE_PACKET 1
#define FIFO_TX_UART_IN_USE_READ_CONTROL 0
#define FIFO_TX_UART_IN_USE_REGISTER 0
#define FIFO_TX_UART_IN_USE_WRITE_CONTROL 1

/*
 * Macros for device 'ADC_sel_channel', class 'altera_avalon_pio'
 * The macros are prefixed with 'ADC_SEL_CHANNEL_'.
 * The prefix is the slave descriptor.
 */
#define ADC_SEL_CHANNEL_COMPONENT_TYPE altera_avalon_pio
#define ADC_SEL_CHANNEL_COMPONENT_NAME ADC_sel_channel
#define ADC_SEL_CHANNEL_BASE 0x0
#define ADC_SEL_CHANNEL_SPAN 32
#define ADC_SEL_CHANNEL_END 0x1f
#define ADC_SEL_CHANNEL_BIT_CLEARING_EDGE_REGISTER 0
#define ADC_SEL_CHANNEL_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ADC_SEL_CHANNEL_CAPTURE 0
#define ADC_SEL_CHANNEL_DATA_WIDTH 3
#define ADC_SEL_CHANNEL_DO_TEST_BENCH_WIRING 0
#define ADC_SEL_CHANNEL_DRIVEN_SIM_VALUE 0
#define ADC_SEL_CHANNEL_EDGE_TYPE NONE
#define ADC_SEL_CHANNEL_FREQ 50000000
#define ADC_SEL_CHANNEL_HAS_IN 0
#define ADC_SEL_CHANNEL_HAS_OUT 1
#define ADC_SEL_CHANNEL_HAS_TRI 0
#define ADC_SEL_CHANNEL_IRQ_TYPE NONE
#define ADC_SEL_CHANNEL_RESET_VALUE 0

/*
 * Macros for device 'ADC_input_data', class 'altera_avalon_pio'
 * The macros are prefixed with 'ADC_INPUT_DATA_'.
 * The prefix is the slave descriptor.
 */
#define ADC_INPUT_DATA_COMPONENT_TYPE altera_avalon_pio
#define ADC_INPUT_DATA_COMPONENT_NAME ADC_input_data
#define ADC_INPUT_DATA_BASE 0x10
#define ADC_INPUT_DATA_SPAN 32
#define ADC_INPUT_DATA_END 0x2f
#define ADC_INPUT_DATA_BIT_CLEARING_EDGE_REGISTER 0
#define ADC_INPUT_DATA_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ADC_INPUT_DATA_CAPTURE 0
#define ADC_INPUT_DATA_DATA_WIDTH 12
#define ADC_INPUT_DATA_DO_TEST_BENCH_WIRING 0
#define ADC_INPUT_DATA_DRIVEN_SIM_VALUE 0
#define ADC_INPUT_DATA_EDGE_TYPE NONE
#define ADC_INPUT_DATA_FREQ 50000000
#define ADC_INPUT_DATA_HAS_IN 1
#define ADC_INPUT_DATA_HAS_OUT 0
#define ADC_INPUT_DATA_HAS_TRI 0
#define ADC_INPUT_DATA_IRQ_TYPE NONE
#define ADC_INPUT_DATA_RESET_VALUE 0

/*
 * Macros for device 'fifo_tx_uart_in_csr', class 'altera_avalon_fifo'
 * The macros are prefixed with 'FIFO_TX_UART_IN_CSR_'.
 * The prefix is the slave descriptor.
 */
#define FIFO_TX_UART_IN_CSR_COMPONENT_TYPE altera_avalon_fifo
#define FIFO_TX_UART_IN_CSR_COMPONENT_NAME fifo_tx_uart
#define FIFO_TX_UART_IN_CSR_BASE 0x20
#define FIFO_TX_UART_IN_CSR_SPAN 32
#define FIFO_TX_UART_IN_CSR_END 0x3f
#define FIFO_TX_UART_IN_CSR_AVALONMM_AVALONMM_DATA_WIDTH 32
#define FIFO_TX_UART_IN_CSR_AVALONMM_AVALONST_DATA_WIDTH 32
#define FIFO_TX_UART_IN_CSR_BITS_PER_SYMBOL 16
#define FIFO_TX_UART_IN_CSR_CHANNEL_WIDTH 8
#define FIFO_TX_UART_IN_CSR_ERROR_WIDTH 8
#define FIFO_TX_UART_IN_CSR_FIFO_DEPTH 256
#define FIFO_TX_UART_IN_CSR_SINGLE_CLOCK_MODE 0
#define FIFO_TX_UART_IN_CSR_SYMBOLS_PER_BEAT 2
#define FIFO_TX_UART_IN_CSR_USE_AVALONMM_READ_SLAVE 1
#define FIFO_TX_UART_IN_CSR_USE_AVALONMM_WRITE_SLAVE 1
#define FIFO_TX_UART_IN_CSR_USE_AVALONST_SINK 0
#define FIFO_TX_UART_IN_CSR_USE_AVALONST_SOURCE 0
#define FIFO_TX_UART_IN_CSR_USE_BACKPRESSURE 1
#define FIFO_TX_UART_IN_CSR_USE_IRQ 0
#define FIFO_TX_UART_IN_CSR_USE_PACKET 1
#define FIFO_TX_UART_IN_CSR_USE_READ_CONTROL 0
#define FIFO_TX_UART_IN_CSR_USE_REGISTER 0
#define FIFO_TX_UART_IN_CSR_USE_WRITE_CONTROL 1

/*
 * Macros for device 'Sel_Max667', class 'altera_avalon_pio'
 * The macros are prefixed with 'SEL_MAX667_'.
 * The prefix is the slave descriptor.
 */
#define SEL_MAX667_COMPONENT_TYPE altera_avalon_pio
#define SEL_MAX667_COMPONENT_NAME Sel_Max667
#define SEL_MAX667_BASE 0x20
#define SEL_MAX667_SPAN 32
#define SEL_MAX667_END 0x3f
#define SEL_MAX667_BIT_CLEARING_EDGE_REGISTER 0
#define SEL_MAX667_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SEL_MAX667_CAPTURE 0
#define SEL_MAX667_DATA_WIDTH 1
#define SEL_MAX667_DO_TEST_BENCH_WIRING 0
#define SEL_MAX667_DRIVEN_SIM_VALUE 0
#define SEL_MAX667_EDGE_TYPE NONE
#define SEL_MAX667_FREQ 50000000
#define SEL_MAX667_HAS_IN 0
#define SEL_MAX667_HAS_OUT 1
#define SEL_MAX667_HAS_TRI 0
#define SEL_MAX667_IRQ_TYPE NONE
#define SEL_MAX667_RESET_VALUE 0

/*
 * Macros for device 'Max6675_Temp', class 'altera_avalon_pio'
 * The macros are prefixed with 'MAX6675_TEMP_'.
 * The prefix is the slave descriptor.
 */
#define MAX6675_TEMP_COMPONENT_TYPE altera_avalon_pio
#define MAX6675_TEMP_COMPONENT_NAME Max6675_Temp
#define MAX6675_TEMP_BASE 0x30
#define MAX6675_TEMP_SPAN 32
#define MAX6675_TEMP_END 0x4f
#define MAX6675_TEMP_BIT_CLEARING_EDGE_REGISTER 0
#define MAX6675_TEMP_BIT_MODIFYING_OUTPUT_REGISTER 0
#define MAX6675_TEMP_CAPTURE 0
#define MAX6675_TEMP_DATA_WIDTH 16
#define MAX6675_TEMP_DO_TEST_BENCH_WIRING 0
#define MAX6675_TEMP_DRIVEN_SIM_VALUE 0
#define MAX6675_TEMP_EDGE_TYPE NONE
#define MAX6675_TEMP_FREQ 50000000
#define MAX6675_TEMP_HAS_IN 1
#define MAX6675_TEMP_HAS_OUT 0
#define MAX6675_TEMP_HAS_TRI 0
#define MAX6675_TEMP_IRQ_TYPE NONE
#define MAX6675_TEMP_RESET_VALUE 0

/*
 * Macros for device 'Buttons_Inicio_Emer_Final_control', class 'altera_avalon_pio'
 * The macros are prefixed with 'BUTTONS_INICIO_EMER_FINAL_CONTROL_'.
 * The prefix is the slave descriptor.
 */
#define BUTTONS_INICIO_EMER_FINAL_CONTROL_COMPONENT_TYPE altera_avalon_pio
#define BUTTONS_INICIO_EMER_FINAL_CONTROL_COMPONENT_NAME Buttons_Inicio_Emer_Final_control
#define BUTTONS_INICIO_EMER_FINAL_CONTROL_BASE 0x40
#define BUTTONS_INICIO_EMER_FINAL_CONTROL_SPAN 32
#define BUTTONS_INICIO_EMER_FINAL_CONTROL_END 0x5f
#define BUTTONS_INICIO_EMER_FINAL_CONTROL_BIT_CLEARING_EDGE_REGISTER 0
#define BUTTONS_INICIO_EMER_FINAL_CONTROL_BIT_MODIFYING_OUTPUT_REGISTER 0
#define BUTTONS_INICIO_EMER_FINAL_CONTROL_CAPTURE 0
#define BUTTONS_INICIO_EMER_FINAL_CONTROL_DATA_WIDTH 4
#define BUTTONS_INICIO_EMER_FINAL_CONTROL_DO_TEST_BENCH_WIRING 0
#define BUTTONS_INICIO_EMER_FINAL_CONTROL_DRIVEN_SIM_VALUE 0
#define BUTTONS_INICIO_EMER_FINAL_CONTROL_EDGE_TYPE NONE
#define BUTTONS_INICIO_EMER_FINAL_CONTROL_FREQ 50000000
#define BUTTONS_INICIO_EMER_FINAL_CONTROL_HAS_IN 1
#define BUTTONS_INICIO_EMER_FINAL_CONTROL_HAS_OUT 0
#define BUTTONS_INICIO_EMER_FINAL_CONTROL_HAS_TRI 0
#define BUTTONS_INICIO_EMER_FINAL_CONTROL_IRQ_TYPE NONE
#define BUTTONS_INICIO_EMER_FINAL_CONTROL_RESET_VALUE 0

/*
 * Macros for device 'Alarm_div_32', class 'altera_avalon_pio'
 * The macros are prefixed with 'ALARM_DIV_32_'.
 * The prefix is the slave descriptor.
 */
#define ALARM_DIV_32_COMPONENT_TYPE altera_avalon_pio
#define ALARM_DIV_32_COMPONENT_NAME Alarm_div_32
#define ALARM_DIV_32_BASE 0x50
#define ALARM_DIV_32_SPAN 32
#define ALARM_DIV_32_END 0x6f
#define ALARM_DIV_32_BIT_CLEARING_EDGE_REGISTER 0
#define ALARM_DIV_32_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ALARM_DIV_32_CAPTURE 0
#define ALARM_DIV_32_DATA_WIDTH 32
#define ALARM_DIV_32_DO_TEST_BENCH_WIRING 0
#define ALARM_DIV_32_DRIVEN_SIM_VALUE 0
#define ALARM_DIV_32_EDGE_TYPE NONE
#define ALARM_DIV_32_FREQ 50000000
#define ALARM_DIV_32_HAS_IN 0
#define ALARM_DIV_32_HAS_OUT 1
#define ALARM_DIV_32_HAS_TRI 0
#define ALARM_DIV_32_IRQ_TYPE NONE
#define ALARM_DIV_32_RESET_VALUE 0

/*
 * Macros for device 'Electro_control', class 'altera_avalon_pio'
 * The macros are prefixed with 'ELECTRO_CONTROL_'.
 * The prefix is the slave descriptor.
 */
#define ELECTRO_CONTROL_COMPONENT_TYPE altera_avalon_pio
#define ELECTRO_CONTROL_COMPONENT_NAME Electro_control
#define ELECTRO_CONTROL_BASE 0x60
#define ELECTRO_CONTROL_SPAN 32
#define ELECTRO_CONTROL_END 0x7f
#define ELECTRO_CONTROL_BIT_CLEARING_EDGE_REGISTER 0
#define ELECTRO_CONTROL_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ELECTRO_CONTROL_CAPTURE 0
#define ELECTRO_CONTROL_DATA_WIDTH 4
#define ELECTRO_CONTROL_DO_TEST_BENCH_WIRING 0
#define ELECTRO_CONTROL_DRIVEN_SIM_VALUE 0
#define ELECTRO_CONTROL_EDGE_TYPE NONE
#define ELECTRO_CONTROL_FREQ 50000000
#define ELECTRO_CONTROL_HAS_IN 1
#define ELECTRO_CONTROL_HAS_OUT 0
#define ELECTRO_CONTROL_HAS_TRI 0
#define ELECTRO_CONTROL_IRQ_TYPE NONE
#define ELECTRO_CONTROL_RESET_VALUE 0

/*
 * Macros for device 'Valves_control', class 'altera_avalon_pio'
 * The macros are prefixed with 'VALVES_CONTROL_'.
 * The prefix is the slave descriptor.
 */
#define VALVES_CONTROL_COMPONENT_TYPE altera_avalon_pio
#define VALVES_CONTROL_COMPONENT_NAME Valves_control
#define VALVES_CONTROL_BASE 0x70
#define VALVES_CONTROL_SPAN 32
#define VALVES_CONTROL_END 0x8f
#define VALVES_CONTROL_BIT_CLEARING_EDGE_REGISTER 0
#define VALVES_CONTROL_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VALVES_CONTROL_CAPTURE 0
#define VALVES_CONTROL_DATA_WIDTH 3
#define VALVES_CONTROL_DO_TEST_BENCH_WIRING 0
#define VALVES_CONTROL_DRIVEN_SIM_VALUE 0
#define VALVES_CONTROL_EDGE_TYPE NONE
#define VALVES_CONTROL_FREQ 50000000
#define VALVES_CONTROL_HAS_IN 0
#define VALVES_CONTROL_HAS_OUT 1
#define VALVES_CONTROL_HAS_TRI 0
#define VALVES_CONTROL_IRQ_TYPE NONE
#define VALVES_CONTROL_RESET_VALUE 0

/*
 * Macros for device 'Mosfet_en', class 'altera_avalon_pio'
 * The macros are prefixed with 'MOSFET_EN_'.
 * The prefix is the slave descriptor.
 */
#define MOSFET_EN_COMPONENT_TYPE altera_avalon_pio
#define MOSFET_EN_COMPONENT_NAME Mosfet_en
#define MOSFET_EN_BASE 0x80
#define MOSFET_EN_SPAN 32
#define MOSFET_EN_END 0x9f
#define MOSFET_EN_BIT_CLEARING_EDGE_REGISTER 0
#define MOSFET_EN_BIT_MODIFYING_OUTPUT_REGISTER 0
#define MOSFET_EN_CAPTURE 0
#define MOSFET_EN_DATA_WIDTH 1
#define MOSFET_EN_DO_TEST_BENCH_WIRING 0
#define MOSFET_EN_DRIVEN_SIM_VALUE 0
#define MOSFET_EN_EDGE_TYPE NONE
#define MOSFET_EN_FREQ 50000000
#define MOSFET_EN_HAS_IN 0
#define MOSFET_EN_HAS_OUT 1
#define MOSFET_EN_HAS_TRI 0
#define MOSFET_EN_IRQ_TYPE NONE
#define MOSFET_EN_RESET_VALUE 0

/*
 * Macros for device 'Mosfet_control', class 'altera_avalon_pio'
 * The macros are prefixed with 'MOSFET_CONTROL_'.
 * The prefix is the slave descriptor.
 */
#define MOSFET_CONTROL_COMPONENT_TYPE altera_avalon_pio
#define MOSFET_CONTROL_COMPONENT_NAME Mosfet_control
#define MOSFET_CONTROL_BASE 0x90
#define MOSFET_CONTROL_SPAN 32
#define MOSFET_CONTROL_END 0xaf
#define MOSFET_CONTROL_BIT_CLEARING_EDGE_REGISTER 0
#define MOSFET_CONTROL_BIT_MODIFYING_OUTPUT_REGISTER 0
#define MOSFET_CONTROL_CAPTURE 0
#define MOSFET_CONTROL_DATA_WIDTH 32
#define MOSFET_CONTROL_DO_TEST_BENCH_WIRING 0
#define MOSFET_CONTROL_DRIVEN_SIM_VALUE 0
#define MOSFET_CONTROL_EDGE_TYPE NONE
#define MOSFET_CONTROL_FREQ 50000000
#define MOSFET_CONTROL_HAS_IN 0
#define MOSFET_CONTROL_HAS_OUT 1
#define MOSFET_CONTROL_HAS_TRI 0
#define MOSFET_CONTROL_IRQ_TYPE NONE
#define MOSFET_CONTROL_RESET_VALUE 0

/*
 * Macros for device 'button_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'BUTTON_PIO_'.
 * The prefix is the slave descriptor.
 */
#define BUTTON_PIO_COMPONENT_TYPE altera_avalon_pio
#define BUTTON_PIO_COMPONENT_NAME button_pio
#define BUTTON_PIO_BASE 0xa0
#define BUTTON_PIO_SPAN 32
#define BUTTON_PIO_END 0xbf
#define BUTTON_PIO_IRQ 1
#define BUTTON_PIO_BIT_CLEARING_EDGE_REGISTER 1
#define BUTTON_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define BUTTON_PIO_CAPTURE 1
#define BUTTON_PIO_DATA_WIDTH 4
#define BUTTON_PIO_DO_TEST_BENCH_WIRING 0
#define BUTTON_PIO_DRIVEN_SIM_VALUE 0
#define BUTTON_PIO_EDGE_TYPE FALLING
#define BUTTON_PIO_FREQ 50000000
#define BUTTON_PIO_HAS_IN 1
#define BUTTON_PIO_HAS_OUT 0
#define BUTTON_PIO_HAS_TRI 0
#define BUTTON_PIO_IRQ_TYPE EDGE
#define BUTTON_PIO_RESET_VALUE 0

/*
 * Macros for device 'fifo_rx_uart_out', class 'altera_avalon_fifo'
 * The macros are prefixed with 'FIFO_RX_UART_OUT_'.
 * The prefix is the slave descriptor.
 */
#define FIFO_RX_UART_OUT_COMPONENT_TYPE altera_avalon_fifo
#define FIFO_RX_UART_OUT_COMPONENT_NAME fifo_rx_uart
#define FIFO_RX_UART_OUT_BASE 0x100
#define FIFO_RX_UART_OUT_SPAN 4
#define FIFO_RX_UART_OUT_END 0x103
#define FIFO_RX_UART_OUT_AVALONMM_AVALONMM_DATA_WIDTH 32
#define FIFO_RX_UART_OUT_AVALONMM_AVALONST_DATA_WIDTH 32
#define FIFO_RX_UART_OUT_BITS_PER_SYMBOL 16
#define FIFO_RX_UART_OUT_CHANNEL_WIDTH 8
#define FIFO_RX_UART_OUT_ERROR_WIDTH 8
#define FIFO_RX_UART_OUT_FIFO_DEPTH 256
#define FIFO_RX_UART_OUT_SINGLE_CLOCK_MODE 0
#define FIFO_RX_UART_OUT_SYMBOLS_PER_BEAT 2
#define FIFO_RX_UART_OUT_USE_AVALONMM_READ_SLAVE 1
#define FIFO_RX_UART_OUT_USE_AVALONMM_WRITE_SLAVE 1
#define FIFO_RX_UART_OUT_USE_AVALONST_SINK 0
#define FIFO_RX_UART_OUT_USE_AVALONST_SOURCE 0
#define FIFO_RX_UART_OUT_USE_BACKPRESSURE 1
#define FIFO_RX_UART_OUT_USE_IRQ 0
#define FIFO_RX_UART_OUT_USE_PACKET 1
#define FIFO_RX_UART_OUT_USE_READ_CONTROL 1
#define FIFO_RX_UART_OUT_USE_REGISTER 0
#define FIFO_RX_UART_OUT_USE_WRITE_CONTROL 0

/*
 * Macros for device 'fifo_rx_uart_out_csr', class 'altera_avalon_fifo'
 * The macros are prefixed with 'FIFO_RX_UART_OUT_CSR_'.
 * The prefix is the slave descriptor.
 */
#define FIFO_RX_UART_OUT_CSR_COMPONENT_TYPE altera_avalon_fifo
#define FIFO_RX_UART_OUT_CSR_COMPONENT_NAME fifo_rx_uart
#define FIFO_RX_UART_OUT_CSR_BASE 0x120
#define FIFO_RX_UART_OUT_CSR_SPAN 32
#define FIFO_RX_UART_OUT_CSR_END 0x13f
#define FIFO_RX_UART_OUT_CSR_AVALONMM_AVALONMM_DATA_WIDTH 32
#define FIFO_RX_UART_OUT_CSR_AVALONMM_AVALONST_DATA_WIDTH 32
#define FIFO_RX_UART_OUT_CSR_BITS_PER_SYMBOL 16
#define FIFO_RX_UART_OUT_CSR_CHANNEL_WIDTH 8
#define FIFO_RX_UART_OUT_CSR_ERROR_WIDTH 8
#define FIFO_RX_UART_OUT_CSR_FIFO_DEPTH 256
#define FIFO_RX_UART_OUT_CSR_SINGLE_CLOCK_MODE 0
#define FIFO_RX_UART_OUT_CSR_SYMBOLS_PER_BEAT 2
#define FIFO_RX_UART_OUT_CSR_USE_AVALONMM_READ_SLAVE 1
#define FIFO_RX_UART_OUT_CSR_USE_AVALONMM_WRITE_SLAVE 1
#define FIFO_RX_UART_OUT_CSR_USE_AVALONST_SINK 0
#define FIFO_RX_UART_OUT_CSR_USE_AVALONST_SOURCE 0
#define FIFO_RX_UART_OUT_CSR_USE_BACKPRESSURE 1
#define FIFO_RX_UART_OUT_CSR_USE_IRQ 0
#define FIFO_RX_UART_OUT_CSR_USE_PACKET 1
#define FIFO_RX_UART_OUT_CSR_USE_READ_CONTROL 1
#define FIFO_RX_UART_OUT_CSR_USE_REGISTER 0
#define FIFO_RX_UART_OUT_CSR_USE_WRITE_CONTROL 0

/*
 * Macros for device 'sysid_qsys', class 'altera_avalon_sysid_qsys'
 * The macros are prefixed with 'SYSID_QSYS_'.
 * The prefix is the slave descriptor.
 */
#define SYSID_QSYS_COMPONENT_TYPE altera_avalon_sysid_qsys
#define SYSID_QSYS_COMPONENT_NAME sysid_qsys
#define SYSID_QSYS_BASE 0x10000
#define SYSID_QSYS_SPAN 8
#define SYSID_QSYS_END 0x10007
#define SYSID_QSYS_ID 2899645186
#define SYSID_QSYS_TIMESTAMP 1472133817

/*
 * Macros for device 'led_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'LED_PIO_'.
 * The prefix is the slave descriptor.
 */
#define LED_PIO_COMPONENT_TYPE altera_avalon_pio
#define LED_PIO_COMPONENT_NAME led_pio
#define LED_PIO_BASE 0x10040
#define LED_PIO_SPAN 32
#define LED_PIO_END 0x1005f
#define LED_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define LED_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define LED_PIO_CAPTURE 0
#define LED_PIO_DATA_WIDTH 8
#define LED_PIO_DO_TEST_BENCH_WIRING 0
#define LED_PIO_DRIVEN_SIM_VALUE 0
#define LED_PIO_EDGE_TYPE NONE
#define LED_PIO_FREQ 50000000
#define LED_PIO_HAS_IN 0
#define LED_PIO_HAS_OUT 1
#define LED_PIO_HAS_TRI 0
#define LED_PIO_IRQ_TYPE NONE
#define LED_PIO_RESET_VALUE 0

/*
 * Macros for device 'dipsw_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'DIPSW_PIO_'.
 * The prefix is the slave descriptor.
 */
#define DIPSW_PIO_COMPONENT_TYPE altera_avalon_pio
#define DIPSW_PIO_COMPONENT_NAME dipsw_pio
#define DIPSW_PIO_BASE 0x10080
#define DIPSW_PIO_SPAN 32
#define DIPSW_PIO_END 0x1009f
#define DIPSW_PIO_IRQ 0
#define DIPSW_PIO_BIT_CLEARING_EDGE_REGISTER 1
#define DIPSW_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define DIPSW_PIO_CAPTURE 1
#define DIPSW_PIO_DATA_WIDTH 4
#define DIPSW_PIO_DO_TEST_BENCH_WIRING 0
#define DIPSW_PIO_DRIVEN_SIM_VALUE 0
#define DIPSW_PIO_EDGE_TYPE ANY
#define DIPSW_PIO_FREQ 50000000
#define DIPSW_PIO_HAS_IN 1
#define DIPSW_PIO_HAS_OUT 0
#define DIPSW_PIO_HAS_TRI 0
#define DIPSW_PIO_IRQ_TYPE EDGE
#define DIPSW_PIO_RESET_VALUE 0


#endif /* _ALTERA_HPSS_H_ */
